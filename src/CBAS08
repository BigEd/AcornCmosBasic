
;   FILE 9  PLUS,MINUS,TIMES,DIV,transcendentals. > CBAS08
;   SIN, COS, EXP
FCLRW CLR FWRKS;+6 also an entry point
 CLR FWRKX
 CLR FWRKMA
 CLR FWRKMB
 CLR FWRKMC
 CLR FWRKMD
 CLR FWRKMG
 RTS
FCFSTP CLC
 LDA COEFP
 ADCIM &05
 STA COEFP
 STA ARGP
 RTS
ARGHPI LDAIM HALFPI
SETCOF STA ARGP
 LDAIM /HPIHI
 STA ARGP+1
 RTS
ARGA LDAIM FWSA
ARGCOM STA ARGP
 LDAIM /FWSD
 STA ARGP+1
 RTS
TAN JSR FRANGE
 LDAIM FWSD
 JSR FSTAP
 JSR FSC
 LDAIM FWSC
 JSR FSTAP
 LDAIM FWSD
 JSR FLDARG
 JSR FSC-2 ;INC FQUAD first
ACDIV LDAIM FWSC
 JSR ARGCOM
 JSR FXDIV
 LDAIM &FF
 RTS
;   FIPOW COMPUTES X**N WHERE X IS PASSED IN
;   F.P. ACC, N IS A ONE BYTE SIGNED INTEGER PASSED IN A
FIPOW TAX
 BPL FIPOWA ;+VE POWER
 DEA
 EORIM &FF ;2'S COMPLEMENT ACC
 PHA
 JSR FRECIP
 PLX ;RECOVER EXPONENT
FIPOWA BEQ FONE
 JSR STARGA
 DEX
 BEQ FIPOWZ
FIPOWB JSR FMUL
 DEX
 BNE FIPOWB
FIPOWZ RTS ;RETURN FROM DIVIDE, ALSO
FONE LDAIM &80
 STA FACCMA
 INA
 STA FACCX
 JMP FCLRB
FDIVZ JMP ZDIVOR
FDIVT = 2,8,8,8
FRECIP LDAIM FATANC-5;1
 JSR SETCOF
;(argp) divided by facc
FXDIV LDA FACCMA
 BEQ FDIVZ ;divide by zero
 JSR FLDW
 BNE FDIVA ;result is zero
 JMP FCLR
FDIVA LDA FWRKS
 EOR FACCS
 STA FACCS ;SIGN CORRECT
 SEC
 LDA FWRKX ;difference of exponents
 ADCIM &81
 ROL FACCXH
 SBC FACCX
 BCS FDIVB
 DEC FACCXH
FDIVB STA FACCX
 LDYIM 4
 STY FWRKX
 LDA FWRKMA
 LDXIM 8
 BRA FDIVE+2
FDIVN STXZY FTMPMA+1
 LDXAY FDIVT
 STY FWRKX
FDIVE BCS FDIVH
 CMP FACCMA
 BNE FDIVF
 LDY FWRKMB
 CPY FACCMB
 BNE FDIVF
 LDY FWRKMC
 CPY FACCMC
 BNE FDIVF
 LDY FWRKMD
 CPY FACCMD
FDIVF BCC FDIVG ;WON'T GO
FDIVH TAY ;WRK-ACC, C BIT ALREADY SET FOR SBC
 LDA FWRKMD
 SBC FACCMD
 STA FWRKMD
 LDA FWRKMC
 SBC FACCMC
 STA FWRKMC
 LDA FWRKMB
 SBC FACCMB
 STA FWRKMB
 TYA
 SBC FACCMA
 SEC
FDIVG ROL FWRKS
 ASL FWRKMD
 ROL FWRKMC
 ROL FWRKMB
 ROLA
 DEX
 BNE FDIVE
 LDX FWRKS
 LDY FWRKX
 DEY
 BPL FDIVN
 ASSERT :MSB: FDIVN = :MSB: .
 ORA FWRKMB
 ORA FWRKMC
 ORA FWRKMD
 BEQ .+3
 SEC
 TXA
 RORA
 RORA
 RORA
 ANDIM &E0
 STA FACCMG
 LDA FTMPMA+1
 STA FACCMD
 LDA FTMPMA+2
 STA FACCMC
 LDA FTMPMA+3
 STA FACCMB
 LDA FTMPMA+4
 STA FACCMA
 BMI FTIDY
 JSR FNRMAZ ;FACCMA must be 01XXXXXX
 BRA FTIDY
FXSUB JSR FNEG
FADD JSR FLDW
 BEQ FADDZ2 ;A+0.0 = A
FADDW JSR FADDW1
FTIDY LDA FACCMG
 CMPIM &80
 BCC FTRNDZ
 BEQ FTRNDA
 INC FACCMD
 BNE FTRNDZ
 JSR FPLNFI;carry set on call
 BRA FTRNDZ
FMUL JSR IFMUL
 BRA FTIDY
FTRNDA ROLA ;A was=&80 and c was set, so A=1
 TSB FACCMD
FTRNDZ LDA FACCXH
 BEQ FTIDYZ
 BPL FOVR ;overflow
FCLR CLR FACCX
 CLR FACCMA
FCLRB CLR FACCS
 CLR FACCXH
 CLR FACCMB
 CLR FACCMC
 CLR FACCMD
FTIDYZ CLR FACCMG
FADDZ2 RTS
FOVR BRK
 = &14
 = "Too big"
 BRK
IFMUL LDA FACCMA
 BEQ FADDZ2 ;0.0 * SOMETHING
 JSR FLDW ;GET OTHER ARG
 BEQ FCLR
 CLC
 LDA FACCX
 ADC FWRKX ;add exponents
 ROL FACCXH;set lsb of faccxh and clear carry
;  Subtract $80 bias from exponent, do not check over/underflow
;  yet in case renormalisation fixes things
 SBCIM &7F ;carry subtracts extra 1
 STA FACCX
 BCS FMULC
 DEC FACCXH
;   COPY ACC TO TMP, CLEAR ACC THEN I CAN DO ACC:=WRK*TMP
;   AS A FIXED POINT OPERATION.
FMULC LDA FACCS
 EOR FWRKS
 STA FACCS ;GET SIGN RIGHT
 PHX
 LDXIM -8
 LDYIM 4
FMULCA LDAAX FACCMA+8
 CLRAX FACCMA+8
 STAAY FTMPMA-1
 INX
 DEY
 BNE FMULCA
; LDYIM 0;FACCMG
 CLR FWRKX
 CLR FWRKX-1
 CLR FWRKX-2
 BRA FMULG
; X already -4
FMULD PHX
 LSR FWRKMA
 ROR FWRKMB
 ROR FWRKMC
 ROR FWRKMD
 ROR FWRKMG
FMULE ASLAX FTMPMA+4
 BCC FMULF
 CLC
 TYA
 ADCAX FWRKMG+1
 TAY
 LDA FACCMD
 ADCAX FWRKMD+1
 STA FACCMD
 LDA FACCMC
 ADCAX FWRKMC+1
 STA FACCMC
 LDA FACCMB
 ADCAX FWRKMB+1
 STA FACCMB
 LDA FACCMA
 ADCAX FWRKMA+1
 STA FACCMA
FMULF INX
 BMI FMULE
 PLX
FMULG LDAAX FTMPMA+4
 BNE FMULD
 ASSERT :MSB: FMULD = :MSB: .
 INX
 BMI FMULG
 PLX
 STY FACCMG
 LDA FACCMA
 BMI FADDZ2
 JMP FNRM+4
;   FLOG SETS ACC := LOG(ACC)
;   (BASE E). WORKS BY
;   (A) CHECK FOR ACC <= 0.0
;   (B) STRIP EXPONENT TO PUT
;       ACC IN RANGE 1.0 - 2.0
;       AND RENORMALIZE TO 
;       .707 TO 1.414
;   (B2) extra care with smallest possible exponent
;   (C) approximate log using (x-1)+(x-1)^2*cf(x-1)
;       where cf is a minimax continued fraction
;   (D) ADD RESULT TO
;      EXPONENT * LOG(2.0)
;   N.B. RESULT CAN NOT OVERFLOW
;   SO NO WORRY THERE.
;   THE SERIES APPROXIMATION
;   USED FOR LOGS IS A CONTINUED
;   FRACTION
;    F(X)=C(0)+X/(C(1)+X/(...
LN JSR FLTFAC
FLOG JSR FTST
 BEQ FLOGA ;LOG(0.0) ILLEGAL
 BPL FLOGB ;LOG(>0.0) OK
FLOGA BRK ;-VE OR ZERO LOG
 = &16
 = "Log range"
FSQRTN BRK
 = &15
 = "-ve root"
 BRK
FLOGB JSR FCLRW+6
 LDYIM &80
 STY FWRKS
 STY FWRKMA
 INY
 STY FWRKX
 LDX FACCX
 BEQ FLOGC
 LDA FACCMA
 CMPIM &B5
 BCC FLOGD
FLOGC INX
 DEY
FLOGD PHX
 STY FACCX
 JSR FADDW
 LDAIM FWSD
 JSR FSTAP
 LDXIM FLOGTC
 LDAIM FSINC-5; last coeff
 LDYIM ((FSINC-FLOGTC)/5-3)/2
 JSR FCF
 LDAIM FWSD
 JSR ACMUL+2
 JSR FMUL
 JSR FADD
 JSR STARGA ;SAVE PARTIAL RESULT
 PLA ;RECOVER EXPONENT BYTE
 SEC
 SBCIM &81
 JSR FLTACC ;FLOAT 8 BIT ACC
 LDAIM LOGTWO
 JSR CX;multiply by logtwo
 JSR ARGA
 JSR FADD
FSQRTZ LDAIM &FF
 RTS
SQR JSR FLTFAC
FSQRT JSR FTST
 BEQ FSQRTZ ;SQRT(0.0) EASY
 BMI FSQRTN ;bad -ve
 LDA FACCX
 LSRA
 PHP
 ADCIM &41
 STA FACCX
 PLP
 BCC FSQRTA
 LSR FACCMA
 ROR FACCMB
 ROR FACCMC
 ROR FACCMD
 ROR FACCMG
FSQRTA JSR FCLRW
 CLR FTMPMB
 CLR FTMPMC
 CLR FTMPMD
 CLR FTMPMG 
 LDAIM &40
 STA FWRKMA
 STA FTMPMA
 LDXIM -5
 LDYIM &10
 SEC
 LDA FACCMA
 SBCIM &40
 STA FACCMA
FSQRTB TYA
 EORAX FWRKMA+5
 STAAX FTMPMA+5
 LDA FACCMA
 CMP FTMPMA
 BNE FSQRTP+1
 PHX
 LDXIM -4
FSQRTH LDAAX FACCMB+4
 CMPAX FTMPMB+4
 BNE FSQRTP
 INX
 BNE FSQRTH
FSQRTP PLX
 BCC FSQRTD-4
 LDA FACCMG
 SBC FTMPMG
 STA FACCMG
 LDA FACCMD
 SBC FTMPMD
 STA FACCMD
 LDA FACCMC
 SBC FTMPMC
 STA FACCMC
 LDA FACCMB
 SBC FTMPMB
 STA FACCMB
 LDA FACCMA
 SBC FTMPMA
 STA FACCMA
 TYA
 ASLA
 BCC FSQRTD
 INA;Y had only 1 bit=1 & was therefore bit 0
 EORAX FWRKMA+4
 STAAX FWRKMA+4
 STAAX FTMPMA+4
 LDAAX FWRKMA+5
 BRA FSQRTE
FSQRTD EORAX FWRKMA+5
 STAAX FWRKMA+5
FSQRTE STAAX FTMPMA+5
 ASL FACCMG
 ROL FACCMD
 ROL FACCMC
 ROL FACCMB
 ROL FACCMA
 TYA
 LSRA
 TAY
 BCC FSQRTB
 LDYIM &80
 INX
 BNE FSQRTB
 JSR FMWTOA
NRMTDY LDA FACCMA
 BMI NRMTD2
 JSR FNRM+4
NRMTD2 JSR FTIDY
 LDAIM &FF
 RTS
; FCF evaluates a continued rational fraction a+b/x^-1+c+d/x^-1
; in Y is (length-3)/2, in A is address of last coeff
; the table (initial pointer in X) is in reverse order
FCF STY FRDDDP ;save length
 STX COEFP
 LDX FACCX
 CPXIM &40
 BCC FCFA ; small number test (includes 0)
 JSR FRECIP
 JSR STARGA ;save 1/x
 LDA COEFP
 JSR SETCOF
 JSR FADD
FCFB JSR FCFCOM
 JSR ARGA
 JSR FADD
 DEC FRDDDP
 BNE FCFB
FCFCOM LDAIM /FLOGTC
 STA ARGP+1
 JSR FCFSTP
 JSR FXDIV
 JSR FCFSTP
 JMP FADD
FCFA JSR SETCOF
 JMP FLDA
ACS JSR ASN
 BRA PISUB
ASN JSR FLTFAC
 LDA FACCS
 BPL ASINA
 CLR FACCS
 JSR ASINA
 BRA SETNEG;a=&ff
ASINA JSR STARGC
 JSR SQRONE
 LDA FACCMA
 BEQ ASINAA
 JSR ACDIV
 BRA FATAN
ASINAA LDAIM HALFPI
 JMP FCFA;returns a>&80 since non zero
;   FATAN COMPUTES ARCTANGENT. METHOD:
;   (A) ATAN(-X) = - ATAN(X)
;   (B) IF X>1.0 USE ATAN(X)=PI/2 - ATAN(1/X)
;   (C0) IF X<0.0001 RESULTIS X ELSE ...
;   (C1) LET Y=(X-0.5), SO Y IS IN RANGE -0.5 TO 0.5
;   (D) COMPUTE SERIES IN Y SO THAT IT GIVES ATAN(X)/X
;   (E) MULTIPLY BY X TO GET RESULT
;   (F) (PUT BACK PI/2 AND '-')
ATN JSR FLTFAC
FATAN JSR FTST
 BEQ FATANZ
 BPL FATANA
 CLR FACCS ;FORCE +VE
 JSR FATANA ;ATAN(-X)
SETNEG STA FACCS ;NEGATE AT END, A known negative since fp calcn done
 RTS
FATANA LDA FACCX
 CMPIM &81 ;IS ACC>=1.0 ?
 BCC FATANB ;NO IT ISNT
 JSR FRECIP
 JSR FATANB ;ATAN(1/X)
PISUB JSR ARGHPI
 JSR FXSUB
 LDAIM &FF
 RTS
FATANB LDA FACCX
 CMPIM &73
 BCC FATANZ ;VERY SMALL NUMBER SO ATAN(X)=X TO M/C ACCURACY
 JSR STARGC ;save arg away
 JSR FCLRW+6
 LDAIM &80
 STA FWRKX
 STA FWRKMA
 STA FWRKS ;W:=-0.5
 JSR FADDW
;   NOW ACC IS IN (-0.5,0.5)
 LDXIM FATANC
 LDAIM FEXPCO-5
 LDYIM ((FEXPCO-FATANC)/5-3)/2
 JSR FCF ;SUM MAGIC SERIES
 JMP ACMUL ;MULTIPLY BY ARG, EXIT (sets A=&ff)
SIN CLC ;carry clear implies SIN
COS PHP ;carry set on entry
 JSR FRANGE
 PLP
 BCC FSC
 INC FQUAD ;if COS
FSC LDA FQUAD
 BITIM 2
 BEQ FSCA
 JSR FSCA
 JMP FNEG
FSCA LSRA
 BCS SQRONE
FATANZ LDAIM &FF ;1ST OR 2ND (+VE)
 RTS
SQRONE JSR STARGA ;SQR(1-ACC^2)
 JSR FMUL
 LDAIM FATANC-5;1
 JSR SETCOF
 JSR FXSUB
 JMP FSQRT
;   FRANGE SUBTRACTS AN INTEGRAL MULTIPLE OF PI/2 FROM ACC,
;   AND SETS FQUAD TO INDICATE (MOD 4, AT LEAST) WHAT THE
;   INTEGER WAS. NOTE THAT THE SUBTRACTION IS DONE WITH A
;   CERTAIN DEGREE OF CARE SO THAT LARGE ARGUMENTS STILL GIVE
;   DECENT ACCURACY.
FRANGE JSR FLTFAC
 LDA FACCX
 CMPIM &98
 BCS FRNGQQ ;ARG TOO BIG (mag >= 2^23)
 JSR STARGA ;save arg away
 JSR ARGHPI ;PI/2
 JSR FLDW
 LDA FACCS
 STA FWRKS
 DEC FWRKX ;PI/4*SGN(INPUT)
 JSR FADDW
 LDAIM F2DPI
 JSR CX ;multiply by 2/PI
; Note that the above calculation only needs to be right to a few bits
 JSR IFIX ;Get integer (in range FF000000 to FFFFFF)
 STA FQUAD ;L.S. BYTE OF ACC in A
 ORA IACCM
 ORA IACCN
 BEQ FRNGD ;FIX(A/(PI/2))=0 (only 3 bytes significant)
 JSR IFLT+4;float knowing faccmg, faccxh clear
 LDAIM FWSB
 JSR FSTAP
 LDAIM HPIHI
 JSR CX
 JSR ARGA
 JSR FADD
 JSR FSTA
 LDAIM FWSB
 JSR FLDARG
 LDAIM HPILO
 JSR CX
 JSR ARGA
 JSR FADD
 BRA FSCCOM
FRNGD JSR LDARGA
FSCCOM JSR STARGC
 JSR FMUL
 LDXIM FSINC
 LDAIM FATANC-5
 LDYIM ((FATANC-FSINC)/5-3)/2
 JSR FCF  ;EVALUATE APPROXIMATION X*(SIN(X)/X)
ACMUL LDAIM FWSC
 LDYIM /FWSC;multiply by any fws at ACMUL+2
 STY ARGP+1;multiply by anything in AY at ACMUL+4
 STA ARGP
 JSR FMUL
 LDAIM &FF
 RTS
FRNGQQ BRK
 = &17
 = "Accuracy lost"
FEXPC BRK
 = &18
 = "Exp range"
 BRK
RAD JSR FLTFAC
 LDAIM FPID18
 BRA CX
LOG JSR LN
 LDAIM RPLN10
CX LDYIM /HPIHI
 BRA ACMUL+4
DEG JSR FLTFAC
 LDAIM F180DP
 BRA CX
;   FEXP ALGORITHM:
;   (A) IF ABS(ARG) > 89.5 (APPROX)
;     THEN GIVE UNDER/OVERFLOW.
;   (B) LET P=NEAREST INTEGER
;       TO ARG, AND F BE RESIDUE.
;     (IF ABS(X)<0.5 TO START
;     WITH COMPUTE THIS QUICKLY)
;   (C) COMPUTE EXP(P) AS POWER
;       OF E=2.71828...
;   (D) NOTE ABS(F)<=0.5
;       COMPUTE EXP(F) BY C.F.
;   (E) COMBINE PARTIAL RESULTS
EXP JSR FLTFAC
FEXP LDA FACCX
 CMPIM &87
 BCC FEXPA ;CERTAINLY IN RANGE
 BNE FEXPB ;CERTAINLY NOT
 LDY FACCMA
 CPYIM &B3
 BCC FEXPA ;IN RANGE, AT LEAST NEARLY
FEXPB LDA FACCS
 BPL FEXPC ;OVERFLOW CASE
 JMP FCLR ;RETURN ZERO, status and A -ve since unchanged
FEXPA JSR FFRAC ;GET FRACTIONAL PART
 LDXIM FEXPCO
 LDAIM ZEEND-5
 LDYIM ((ZEEND-FEXPCO)/5-3)/2
 JSR FCF ;SUM CONTINUED FRACTION FOR EXP(FRACTION)
 JSR STARGC ;save it away
 LDAIM FNUME
 JSR FCFA
 LDA FQUAD
 JSR FIPOW ;e^N
 BRA ACMUL
 LNK CBAS09
